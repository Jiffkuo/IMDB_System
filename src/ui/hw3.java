package ui;

import oracle.jdbc.OracleDriver;
import sun.jvm.hotspot.gc_interface.GCName;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.util.ArrayList;

/**
 * Created by Tzu-Chi Kuo on 2017/3/2.
 * IMDB Movie Query Engine
 * - Java UI
 * - Query Command
 * - Oracle DB server
 */

public class hw3 {
    /*
     * generated by GUI Designer
     */
    private JPanel MainPanel;
    private JLabel TitleLable;
    private JPanel TopPanel;
    private JPanel ButtomPanel;
    private JScrollPane GenreScrollPanel;
    private JScrollPane CountryScrollPanel;
    private JScrollPane FilmingScrollPanel;
    private JPanel CriticsPanel;
    private JPanel MovieTagPanel;
    private JPanel RatingPanel;
    private JPanel YearPanel;
    private JPanel TagPanel;
    private JPanel WeightPanel;
    private JScrollPane GeneratedSQLScrollPanel;
    private JPanel SearchPanel;
    private JScrollPane ResultTableScrollPanel;
    private JPanel ConditionPanel;
    private JPanel ExecutePanel;
    private JLabel GenresLabel;
    private JLabel CountryLabel;
    private JLabel FilmingLabel;
    private JLabel OptionLabel;
    private JLabel RatingLabel;
    private JComboBox RatingComboBox;
    private JTextField RatingValueTextField;
    private JLabel RatingsLabel;
    private JLabel RatingValueLabel;
    private JLabel TagLabel;
    private JTextArea MovieTagValueTextArea;
    private JComboBox WeightComboBox;
    private JTextField WeightValueTextField;
    private JLabel WeightLabel;
    private JLabel WeightValueLabel;
    private JTextArea GenerateSQLCmdTextArea;
    private JLabel GenerateSQLCmdLabel;
    private JComboBox ConditionComboBox;
    private JButton ExecuteButton;
    private JLabel SearchLabel;
    private JTable QueryResultTable;
    private JLabel QueryResultLabel;
    private JLabel MovieYearLabel;
    private JComboBox YearFromComboBox;
    private JComboBox YearToComboBox;
    private JLabel YearFromLabel;
    private JLabel YearToLabel;
    private JLabel NoteLabel;
    private JPanel GenrePanel;
    private JPanel CountryPanel;
    private JPanel FilmingPanel;
    private JButton LoadButton;
    private JPanel LoadPanel;
    private JLabel FirstStepLabel;

    /*
     * global variable
     */
    private ArrayList<JCheckBox> allGenres;
    private ArrayList<JCheckBox> allCountries;
    private ArrayList<JCheckBox> allFilmCountries;
    private String searchCondition;
    private Connection conn;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        MainPanel = new JPanel();
        MainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        MainPanel.setBackground(new Color(-7363092));
        MainPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(new Color(-16777216)), null));
        TitleLable = new JLabel();
        TitleLable.setText("Movie Query Engine");
        MainPanel.add(TitleLable, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        TopPanel = new JPanel();
        TopPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 5, new Insets(0, 0, 0, 0), -1, -1));
        MainPanel.add(TopPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        GenreScrollPanel = new JScrollPane();
        GenreScrollPanel.setHorizontalScrollBarPolicy(30);
        GenreScrollPanel.setVerticalScrollBarPolicy(20);
        TopPanel.add(GenreScrollPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        GenrePanel = new JPanel();
        GenrePanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        GenreScrollPanel.setViewportView(GenrePanel);
        CountryScrollPanel = new JScrollPane();
        TopPanel.add(CountryScrollPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        CountryPanel = new JPanel();
        CountryPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        CountryScrollPanel.setViewportView(CountryPanel);
        FilmingScrollPanel = new JScrollPane();
        TopPanel.add(FilmingScrollPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        FilmingPanel = new JPanel();
        FilmingPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        FilmingScrollPanel.setViewportView(FilmingPanel);
        CriticsPanel = new JPanel();
        CriticsPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        TopPanel.add(CriticsPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        CriticsPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        RatingPanel = new JPanel();
        RatingPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        CriticsPanel.add(RatingPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        RatingPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        RatingLabel = new JLabel();
        RatingLabel.setText("Critics' Rating");
        RatingPanel.add(RatingLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        RatingComboBox = new JComboBox();
        RatingPanel.add(RatingComboBox, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        RatingValueTextField = new JTextField();
        RatingPanel.add(RatingValueTextField, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        RatingsLabel = new JLabel();
        RatingsLabel.setText("Ratings:");
        RatingPanel.add(RatingsLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        RatingValueLabel = new JLabel();
        RatingValueLabel.setText("Value:");
        RatingPanel.add(RatingValueLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        YearPanel = new JPanel();
        YearPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        CriticsPanel.add(YearPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        YearPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        MovieYearLabel = new JLabel();
        MovieYearLabel.setText("Movie Year");
        YearPanel.add(MovieYearLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        YearFromComboBox = new JComboBox();
        YearPanel.add(YearFromComboBox, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        YearToComboBox = new JComboBox();
        YearPanel.add(YearToComboBox, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        YearFromLabel = new JLabel();
        YearFromLabel.setText("From");
        YearPanel.add(YearFromLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        YearToLabel = new JLabel();
        YearToLabel.setText("To:");
        YearPanel.add(YearToLabel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        MovieTagPanel = new JPanel();
        MovieTagPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        TopPanel.add(MovieTagPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        MovieTagPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        TagPanel = new JPanel();
        TagPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        MovieTagPanel.add(TagPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        TagPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        TagLabel = new JLabel();
        TagLabel.setText("Movie Tag Values");
        TagPanel.add(TagLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        MovieTagValueTextArea = new JTextArea();
        TagPanel.add(MovieTagValueTextArea, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        WeightPanel = new JPanel();
        WeightPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        MovieTagPanel.add(WeightPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        WeightPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        WeightComboBox = new JComboBox();
        WeightPanel.add(WeightComboBox, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        WeightValueTextField = new JTextField();
        WeightPanel.add(WeightValueTextField, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        WeightLabel = new JLabel();
        WeightLabel.setText("Weight:");
        WeightPanel.add(WeightLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        WeightValueLabel = new JLabel();
        WeightValueLabel.setText("Value:");
        WeightPanel.add(WeightValueLabel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        GenresLabel = new JLabel();
        GenresLabel.setText("Genres");
        TopPanel.add(GenresLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CountryLabel = new JLabel();
        CountryLabel.setText("Country");
        TopPanel.add(CountryLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        FilmingLabel = new JLabel();
        FilmingLabel.setText("Filming\nLocation");
        TopPanel.add(FilmingLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        OptionLabel = new JLabel();
        OptionLabel.setText("Option");
        TopPanel.add(OptionLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ButtomPanel = new JPanel();
        ButtomPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        MainPanel.add(ButtomPanel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        GeneratedSQLScrollPanel = new JScrollPane();
        ButtomPanel.add(GeneratedSQLScrollPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        GenerateSQLCmdTextArea = new JTextArea();
        GeneratedSQLScrollPanel.setViewportView(GenerateSQLCmdTextArea);
        SearchPanel = new JPanel();
        SearchPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        ButtomPanel.add(SearchPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        SearchPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        ConditionPanel = new JPanel();
        ConditionPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        SearchPanel.add(ConditionPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        ConditionPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        ConditionComboBox = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("OR");
        defaultComboBoxModel1.addElement("AND");
        ConditionComboBox.setModel(defaultComboBoxModel1);
        ConditionPanel.add(ConditionComboBox, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        NoteLabel = new JLabel();
        NoteLabel.setText("Step2: Select (Default is OR)");
        ConditionPanel.add(NoteLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ExecutePanel = new JPanel();
        ExecutePanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        SearchPanel.add(ExecutePanel, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        ExecutePanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        ExecuteButton = new JButton();
        ExecuteButton.setText("Execute");
        ExecutePanel.add(ExecuteButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        LoadPanel = new JPanel();
        LoadPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        SearchPanel.add(LoadPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        LoadPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        LoadButton = new JButton();
        LoadButton.setText("Load Data");
        LoadPanel.add(LoadButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        FirstStepLabel = new JLabel();
        FirstStepLabel.setText("Step1: Click Load Data");
        LoadPanel.add(FirstStepLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ResultTableScrollPanel = new JScrollPane();
        ButtomPanel.add(ResultTableScrollPanel, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        ResultTableScrollPanel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null));
        QueryResultTable = new JTable();
        ResultTableScrollPanel.setViewportView(QueryResultTable);
        GenerateSQLCmdLabel = new JLabel();
        GenerateSQLCmdLabel.setText("Generated SQL Command");
        ButtomPanel.add(GenerateSQLCmdLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        SearchLabel = new JLabel();
        SearchLabel.setText("Search Condition");
        ButtomPanel.add(SearchLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        QueryResultLabel = new JLabel();
        QueryResultLabel.setText("Query Result");
        ButtomPanel.add(QueryResultLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainPanel;
    }

    /*
     * attribute type
     */
    public enum AttrType {
        Genres,
        Countries
    }

    /*
     * Constructor
     *  - initialize global variables
     *  - Others: generated by GUI Designer
     *
     */
    public hw3() {
        // initialize
        conn = null;
        allGenres = new ArrayList<>();
        allCountries = new ArrayList<>();
        allFilmCountries = new ArrayList<>();
        searchCondition = "OR";

        ExecuteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("click execute query ...");
            }
        });
        ConditionComboBox.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                performConditionComboBox(e);
            }
        });
        LoadButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loadGenreData();
            }
        });
    }

    // entry function
    public void startQueryEngine() {
        // initialize UI framework
        JFrame frame = new JFrame("hw3");
        frame.setContentPane(new hw3().MainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);

        while (true) ;
    }

    /*
     * Construct and return a database connection
     * throws SQL Exception if an error connection
     * throws ClassNotFoundException if DB driver not found
    */
    private Connection openConnect() throws SQLException, ClassNotFoundException {
        // Load Oracle DB driver
        DriverManager.registerDriver(new OracleDriver());
        // hard-coded configuration to connect DB server
        String host = "localhost";
        String port = "1521";
        String dbName = "orcl"; // Win: xe, MAC: orcl
        String uName = "hr";
        String pWord = "hr";

        // Construct JDBC URL
        String dbURL = "jdbc:oracle:thin:@" + host + ":" + port + ":" + dbName;
        return DriverManager.getConnection(dbURL, uName, pWord);
    }

    /*
     * Close the database connection
     */
    private void closeConnect() {
        try {
            conn.close();
            System.out.println("Disconnect DB ...");
        } catch (SQLException e) {
            System.err.println("[Error]: Cannot close Oracle DB connection: " + e.getMessage());
        }
    }

    /*
     *  Query Execute function
     */
    private ResultSet executeQuery(String query) {
        Statement stmt = null;
        ResultSet result = null;
        try {
            System.out.print("Connect DB .... ");
            conn = openConnect();
            System.out.println("successfully ");
            stmt = conn.createStatement();
            result = stmt.executeQuery(query);
        } catch (SQLException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } finally {
            //closeConnect();
        }

        return result;
    }

    /*
     * For debug purpose
     */
    private void showResultSet(ResultSet result) throws SQLException {
        System.out.println("[DEBUG INFO]");
        ResultSetMetaData meta = result.getMetaData();
        //int tupleCount = 1;
        while (result.next()) {
            // System.out.print("Tuple " + tupleCount++ + " : ");
            // System.out.print("Tuple " + tupleCount++ + " : ");
            for (int col = 1; col <= meta.getColumnCount(); col++) {

                System.out.print("\"" + result.getString(col) + "\",");
            }
            System.out.println();
        }
    }

    /*
     * Load Genre Data and reload to clean all panels
     */
    private void loadGenreData() {
        ResultSet result = null;
        removeGenrePanel();
        removeCountryPanel();
        removeFilmCountryPanel();

        System.out.println("Start to load all Genres data");
        try {
            String query = "SELECT DISTINCT genre\n" + "FROM movie_genres\n";
            result = executeQuery(query);
            updateGenresPanel(result);
            /*
            query = "SELECT DISTINCT country\n" + "FROM movie_countries\n";
            result = executeQuery(query);
            updateCountryPanel(result);
            */
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            closeConnect();
        }
    }

    /*
     * review and return which Genre or Country JCheckbox is selected or not
     */
    private ArrayList<String> selectCheckBox(AttrType type) {
        ArrayList<String> checkList = new ArrayList<>();
        ArrayList<JCheckBox> typeList = new ArrayList<>();
        if (type.equals(AttrType.Genres)) {
            typeList = allGenres;
        } else if (type.equals(AttrType.Countries)) {
            typeList = allCountries;
        }
        for (JCheckBox cb : typeList) {
            if (cb.isSelected()) {
                checkList.add(cb.getText());
            }
        }
        return checkList;
    }

    /*
     * Create Genres JCheckBox on GenrePanel
     */
    private void updateGenresPanel(ResultSet result) throws SQLException {
        while (result.next()) {
            GenrePanel.setLayout(new GridLayout(0, 5, 20, 20));
            JCheckBox cb = new JCheckBox(result.getString(1));
            cb.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    /*
                    if (searchCondition == "OR") {
                        loadAllCountry();
                    } else if (searchCondition == "AND") {
                        loadANDCountry();
                    }
                    */
                    // according 3) the countries matching the genres selections will be listed
                    loadANDCountry();
                }
            });
            // add all queried genres JCheckbox to global variable
            allGenres.add(cb);
            // update GenrePanel with genres JCheckbox
            GenrePanel.add(cb);
            GenrePanel.revalidate();
            GenrePanel.repaint();
        }
        System.out.println("Load Genre completely");
    }

    /*
     * Create Country JCheckBox on CountryPanel
     */
    private void updateCountryPanel(ResultSet result) throws SQLException {
        removeCountryPanel();
        while (result.next()) {
            CountryPanel.setLayout(new GridLayout(0, 1));
            String text = result.getString(1);
            if (!text.equals(" ")) { // some genres don't have country
                JCheckBox cb = new JCheckBox(text);
                cb.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        /*
                        if (searchCondition == "OR") {
                            loadAllFilmCountry();
                        } else if (searchCondition == "AND") {
                            loadANDFilmCountry();
                        }
                        */
                        loadANDFilmCountry();
                    }
                });
                allCountries.add(cb);
                CountryPanel.add(cb);
                CountryPanel.revalidate();
                CountryPanel.repaint();
            }
        }
    }

    /*
     * Create Film Country JCheckBox on FilmingPanel
     */
    private void updateFilmCountryPanel(ResultSet result) throws SQLException {
        removeFilmCountryPanel();
        while (result.next()) {
            FilmingPanel.setLayout(new GridLayout(0, 1));
            String text = result.getString(1);
            if (!text.equals(" ")) { // some countries don't have filming locations
                JCheckBox cb = new JCheckBox(text);
                allFilmCountries.add(cb);
                FilmingPanel.add(cb);
                FilmingPanel.revalidate();
                FilmingPanel.repaint();
            }
        }
    }

    /*
     * when genre updates to non select, set GenrePanel is invisible
     */
    private void removeGenrePanel() {
        for (JCheckBox cb : allGenres) {
            cb.setVisible(false);
            GenrePanel.remove(cb);
        }
        // clean global list and update CountryPanel
        allGenres.clear();
        GenrePanel.updateUI();
    }

    /*
     * when country updates to non select, set CountryPanel is invisible
     */
    private void removeCountryPanel() {
        for (JCheckBox cb : allCountries) {
            cb.setVisible(false);
            CountryPanel.remove(cb);
        }
        // clean global list and update CountryPanel
        allCountries.clear();
        CountryPanel.updateUI();
    }

    /*
     * when filming updates to non select, set FilmingPanel is invisible
     */
    private void removeFilmCountryPanel() {
        for (JCheckBox cb : allFilmCountries) {
            cb.setVisible(false);
            FilmingPanel.remove(cb);
        }
        // clean global list and update CountryPanel
        allFilmCountries.clear();
        FilmingPanel.updateUI();
    }

    /*
     * Update and create Country JCheckBox on GenreScrollPanel
     * OR condition
     */
    private void loadAllCountry() {
        ResultSet result = null;
        try {
            String query = "SELECT DISTINCT country\n" + "FROM movie_countries";
            result = executeQuery(query);
            updateCountryPanel(result);
            // debug purpose
            //GenerateSQLCmdTextArea.setText(query);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            closeConnect();
        }
    }

    /*
     * Update and create Country JCheckBox on CountryScrollPanel
     * AND condition
     */
    private void loadANDCountry() {
        ArrayList<String> checkList = selectCheckBox(AttrType.Genres);
        ResultSet result = null;

        if (checkList.size() != 0) {
            StringBuilder sb = new StringBuilder();
            // prepare query command
            sb.append("SELECT DISTINCT country\n");
            sb.append("FROM movie_countries loc, ");
            sb.append("(");
            sb.append("SELECT movieID, LISTAGG(genre, ',') WITHIN GROUP (ORDER BY genre) AS Genres\n");
            sb.append("FROM movie_genres\n");
            sb.append("GROUP BY movieID) select_genre\n");
            sb.append("WHERE select_genre.movieID = loc.movieID AND ");
            for (int i = 0; i < checkList.size(); i++) {
                if (i == 0) {
                    sb.append("select_genre.Genres LIKE '%" + checkList.get(i) + "%'\n");
                } else {
                    sb.append("AND select_genre.Genres LIKE '%" + checkList.get(i) + "%'\n");
                }
            }
            GenerateSQLCmdTextArea.setText(sb.toString());
            // connection DB and execute query command
            try {
                result = executeQuery(sb.toString());
                updateCountryPanel(result);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            removeCountryPanel();
            removeFilmCountryPanel();
        }
    }

    /*
     * Update and create Film Country JCheckBox on FilmingScrollPanel
     * OR condition
     */
    private void loadAllFilmCountry() {
        ResultSet result = null;
        try {
            String query = "SELECT DISTINCT location1\n" + "FROM movie_locations";
            result = executeQuery(query);
            updateFilmCountryPanel(result);
            // debug purpose
            //GenerateSQLCmdTextArea.setText(query);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            closeConnect();
        }
    }

    /*
     * Update and create Film Country JCheckBox on FilmingScrollPanel
     * AND condition
     */
    private void loadANDFilmCountry() {
        ArrayList<String> checkGenreList = selectCheckBox(AttrType.Genres);
        ArrayList<String> checkCountryList = selectCheckBox(AttrType.Countries);
        ResultSet result = null;

        if (checkGenreList.size() != 0 && checkCountryList.size() != 0) {
            StringBuilder sb = new StringBuilder();
            // prepare query command
            sb.append("SELECT DISTINCT location1\n");
            sb.append("FROM movie_countries cut, movie_locations loc, ");
            sb.append("(");
            sb.append("SELECT movieID, LISTAGG(genre, ',') WITHIN GROUP (ORDER BY genre) AS Genres\n");
            sb.append("FROM movie_genres\n");
            sb.append("GROUP BY movieID) select_genre\n");
            sb.append("WHERE select_genre.movieID = cut.movieID AND cut.movieID = loc.movieID AND ");
            for (int i = 0; i < checkGenreList.size(); i++) {
                if (i == 0) {
                    sb.append("select_genre.Genres LIKE '%" + checkGenreList.get(i) + "%'\n");
                } else {
                    sb.append("AND select_genre.Genres LIKE '%" + checkGenreList.get(i) + "%'\n");
                }
            }
            GenerateSQLCmdTextArea.setText(sb.toString());
            // connection DB and execute query command
            try {
                result = executeQuery(sb.toString());
                updateFilmCountryPanel(result);
            } catch (SQLException e) {
                e.printStackTrace();
            }
        } else {
            removeFilmCountryPanel();
        }
    }

    /*
     * Performance Listener event
     */
    private void performConditionComboBox(ActionEvent e) {
        searchCondition = ConditionComboBox.getSelectedItem().toString();
        if (searchCondition == "OR") {
            loadAllCountry();
            loadAllFilmCountry();
        } else if (searchCondition == "AND") {
            loadANDCountry();
            loadANDFilmCountry();
        } else {
            System.err.println("[Error]: Cannot find condition: " + searchCondition);
        }
    }

}
